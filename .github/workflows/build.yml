name: build

on:
  push:
    branches:
      - main
    tags:
      - v*
  pull_request:
    branches:
      - main

permissions:
  contents: write

jobs:
  build-rust:
    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest, windows-latest] # 定义操作系统矩阵
    runs-on: ${{ matrix.platform }} # 定义作业运行的操作系统
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Install Rust
        run: rustup toolchain install stable --component llvm-tools-preview
      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      - name: install nextest
        uses: taiki-e/install-action@nextest
      - uses: Swatinem/rust-cache@v2
      - name: Check code format
        run: cargo fmt -- --check
      - name: Check the package for errors
        run: cargo check --all
      - name: Lint rust sources
        run: cargo clippy --all-targets --all-features --tests --benches -- -D warnings
      - name: Execute rust tests
        run: cargo nextest run --all-features
      - name: Generate a changelog
        uses: orhun/git-cliff-action@v2
        id: git-cliff
        if: startsWith(github.ref, 'refs/tags/')
        with:
          config: cliff.toml
          args: -vv --latest --strip header
        env:
          OUTPUT: CHANGES.md
      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          body: ${{ steps.git-cliff.outputs.content }}

      - name: Build project
        run: cargo build --release # 构建项目的发布版本

      # 上传Linux x86_64平台的构建产物
      - name: Upload artifact (Linux)
        if: matrix.os == 'ubuntu-latest' && matrix.arch == 'x86_64'
        uses: actions/upload-artifact@v2
        with:
          name: ubuntu-latest-rustCli
          path: target/release/rustCli

      # 上传Linux aarch64平台的构建产物
      - name: Upload artifact (Linux arch64)
        if: matrix.os == 'ubuntu-latest' && matrix.arch == 'aarch64'
        uses: actions/upload-artifact@v2
        with:
          name: ubuntu-latest-rustCli-aarch64
          path: target/release/rustCli

      # 上传Linux aarch64平台的构建产物
      - name: Upload artifact (Linux aarch64)
        if: matrix.os == 'ubuntu-latest' && matrix.arch == 'aarch64'
        uses: actions/upload-artifact@v2
        with:
          name: ubuntu-latest-rustCli-aarch64
          path: target/release/rustCli

      # 上传macOS x86_64平台的构建产物
      - name: Upload artifact (macOS)
        if: matrix.os == 'macos-latest' && matrix.arch == 'x86_64'
        uses: actions/upload-artifact@v2
        with:
          name: macos-latest-rustCli
          path: target/release/rustCli

      # 上传macOS aarch64平台的构建产物
      - name: Upload artifact (macOS aarch64)
        if: matrix.os == 'macos-latest' && matrix.arch == 'aarch64'
        uses: actions/upload-artifact@v2
        with:
          name: macos-latest-rustCli-aarch64
          path: target/release/rustCli

      # 上传Windows x86_64平台的构建产物
      - name: Upload artifact (Windows)
        if: matrix.os == 'windows-latest' && matrix.arch == 'x86_64'
        uses: actions/upload-artifact@v2
        with:
          name: windows-latest-rustCli
          path: target/release/rustCli.exe

      # 上传Windows aarch64平台的构建产物
      - name: Upload artifact (Windows aarch64)
        if: matrix.os == 'windows-latest' && matrix.arch == 'aarch64'
        uses: actions/upload-artifact@v2
        with:
          name: windows-latest-rustCli-aarch64
          path: target/release/rustCli.exe

  release:
    runs-on: ubuntu-latest # 定义作业运行在Ubuntu系统上
    needs: build-rust # 依赖于 build-rust作业

    steps:
      - name: Checkout code
        uses: actions/checkout@v2 # 检出仓库代码

      # 下载Linux x86_64平台的构建产物
      - name: Download artifact (Linux-x86_64)
        uses: actions/download-artifact@v2
        with:
          name: ubuntu-latest-rustCli
          path: artifacts/ubuntu

      # 下载macOS x86_64平台的构建产物
      - name: Download artifact (macOS-x86_64)
        uses: actions/download-artifact@v2
        with:
          name: macos-latest-rustCli
          path: artifacts/macos

      # 下载Windows x86_64平台的构建产物
      - name: Download artifact (Windows-x86_64)
        uses: actions/download-artifact@v2
        with:
          name: windows-latest-rustCli
          path: artifacts/windows

      # 下载Linux aarch64平台的构建产物
      - name: Download artifact (Linux-aarch64)
        uses: actions/download-artifact@v2
        with:
          name: ubuntu-latest-rustCli-aarch64
          path: artifacts/ubuntu

      # 下载macOS aarch64平台的构建产物
      - name: Download artifact (macOS-aarch64)
        uses: actions/download-artifact@v2
        with:
          name: macos-latest-rustCli-aarch64
          path: artifacts/macos

      # 下载Windows aarch64平台的构建产物
      - name: Download artifact (Windows-aarch64)
        uses: actions/download-artifact@v2
        with:
          name: windows-latest-rustCli-aarch64
          path: artifacts/windows

      - name: Create release
        id: create_release
        uses: actions/create-release@v1 # 创建GitHub release
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }} # 使用GitHub令牌进行身份验证
        with:
          tag_name: ${{ github.ref }} # 使用推送的标签名
          release_name: Release ${{ github.ref }} # 使用推送的标签名作为发布名称
          body: |
            Changes in this Release
            - First Change
            - Second Change # 发布说明
          draft: false # 是否为草稿
          prerelease: false # 是否为预发布

      # 上传Linux x86_64平台的构建产物到发布页面
      - name: Upload Linux x86_64 artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }} # 使用GitHub令牌进行身份验证
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # 使用创建发布步骤生成的上传URL
          asset_path: artifacts/ubuntu/rustCli # 上传的文件路径
          asset_name: rustCli-linux-x86_64 # 上传的文件名
          asset_content_type: application/octet-stream # 文件内容类型

      # 上传macOS x86_64平台的构建产物到发布页面
      - name: Upload macOS x86_64 artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }} # 使用GitHub令牌进行身份验证
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # 使用创建发布步骤生成的上传URL
          asset_path: artifacts/macos/rustCli # 上传的文件路径
          asset_name: rustCli-macos-x86_64 # 上传的文件名
          asset_content_type: application/octet-stream # 文件内容类型

      # 上传Windows x86_64平台的构建产物到发布页面
      - name: Upload Windows x86_64 artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }} # 使用GitHub令牌进行身份验证
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # 使用创建发布步骤生成的上传URL
          asset_path: artifacts/windows/rustCli.exe # 上传的文件路径
          asset_name: rustCli-windows-x86_64.exe # 上传的文件名
          asset_content_type: application/octet-stream # 文件内容类型

      # 上传Linux aarch64平台的构建产物到发布页面
      - name: Upload Linux aarch64 artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }} # 使用GitHub令牌进行身份验证
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # 使用创建发布步骤生成的上传URL
          asset_path: artifacts/ubuntu/rustCli # 上传的文件路径
          asset_name: rustCli-linux-aarch64 # 上传的文件名
          asset_content_type: application/octet-stream # 文件内容类型

      # 上传macOS aarch64平台的构建产物到发布页面
      - name: Upload macOS aarch64 artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }} # 使用GitHub令牌进行身份验证
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # 使用创建发布步骤生成的上传URL
          asset_path: artifacts/macos/rustCli # 上传的文件路径
          asset_name: rustCli-macos-aarch64 # 上传的文件名
          asset_content_type: application/octet-stream # 文件内容类型

      # 上传Windows aarch64平台的构建产物到发布页面
      - name: Upload Windows aarch64 artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }} # 使用GitHub令牌进行身份验证
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # 使用创建发布步骤生成的上传URL
          asset_path: artifacts/windows/rustCli.exe # 上传的文件路径
          asset_name: rustCli-windows-aarch64.exe # 上传的文件名
          asset_content_type: application/octet-stream # 文件内容类型

